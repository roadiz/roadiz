server {
    listen 80;
    listen [::]:80;

    root /var/www/vhosts/myawesomewebsite.com/htdocs;
    index index.php index.html index.htm;

    # Make site accessible from http://localhost/
    server_name myawesomewebsite.com localhost;

    # config to don't allow the browser to render the page inside an frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options "SAMEORIGIN";

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";
    # Les navigateurs Internet Explorer et Chrome disposent d'une fonctionnalité dite de "MIME-Type sniffing",
    # qui consiste à détecter automatiquement le type d'une ressource web.
    # Ainsi, une ressource déclarée comme étant une image pourra être interprétée
    # comme un script si tel est son contenu.
    # Une personne malveillante pourrait profiter d'un envoi de fichier
    # sur votre site par exemple pour injecter du code malveillant.
    # Nous vous conseillons de désactiver le MIME-Type sniffing pour
    # limiter les effets de l'envoi d'un tel fichier.
    add_header X-Content-Type-Options "nosniff";

    location ~ /themes/(.+)\.(php|yml|twig|xlf|rzn|rzt|rzg)$ {
        deny all;
    }

    # Enable Expire on Themes public assets
    location ~* ^/themes/*.*\.(?:ico|css|js|woff2?|eot|ttf|otf|svg|gif|jpe?g|png)$ {
        expires 30d;
        access_log off;
        add_header Pragma "public";
        add_header Cache-Control "public";
        add_header Vary "Accept-Encoding";
    }
    # Enable Expire on native documents files
    location ~* ^/files/*.*\.(?:ico|gif|jpe?g|png)$ {
        expires 15d;
        access_log off;
        add_header Pragma "public";
        add_header Cache-Control "public";
        add_header Vary "Accept-Encoding";
    }

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to front-end controller
        # (do not forget to pass GET parameters).
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ /install.php/ {
        try_files $uri @pass_to_roadiz_install;
    }
    location @pass_to_roadiz_install{
        rewrite ^ /install.php?$request_uri last;
    }
    location ~ /dev.php/ {
        try_files $uri @pass_to_roadiz_dev;
    }
    location @pass_to_roadiz_dev{
        rewrite ^ /dev.php?$request_uri last;
    }
    location ~ /preview.php/ {
        try_files $uri @pass_to_roadiz_preview;
    }
    location @pass_to_roadiz_preview{
        rewrite ^ /preview.php?$request_uri last;
    }

    #
    # Production entry point.
    #
    location ~ ^/index\.php(/|$) {
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
        # With php5-fpm:
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        include fastcgi_params;
        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/app.php/some-path
        # Remove the internal directive to allow URIs like this
        internal;
    }

    #
    # Preview, Dev and Install entry points.
    #
    # In production server, don't deploy dev.php or install.php
    #
    location ~ ^/(dev|install|preview)\.php(/|$) {
        # Enforce OPCache PHP class cache invalidation at each request
        #fastcgi_param PHP_VALUE "opcache.revalidate_freq=0";
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
        # With php5-fpm:
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        include fastcgi_params;
    }

    # Don't log robots.txt or favicon.ico files
    location = /favicon.ico { log_not_found off; access_log off; }
    location = /robots.txt  { allow all; access_log off; log_not_found off; }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    location ~ /\.ht {
        deny all;
    }
    location ~ /\.git {
        deny all;
    }
    location /src {
        deny all;
    }
    location /gen-src {
        deny all;
    }
    location /files/fonts {
        deny all;
    }
    location /files/private {
        deny all;
    }
    location /cache {
        deny all;
    }
    location /bin {
        deny all;
    }
    location /samples {
        deny all;
    }
    location /tests {
        deny all;
    }
    location /vendor {
        deny all;
    }
    location /conf {
        deny all;
    }
    location /logs {
        deny all;
    }
}
